<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<MatUnitTests>
    <Arithmetic>
        <Test>
            <Name>Positive</Name>
            <Unary>True</Unary>
            <PythonCall>np.positive</PythonCall>
        </Test>
        <Test>
            <Name>Negative</Name>
            <Unary>True</Unary>
            <PythonCall>np.negative</PythonCall>
        </Test>
        <Test>
            <Name>Addition</Name>
            <Unary>False</Unary>
            <PythonCall>np.add</PythonCall>
        </Test>
        <Test>
            <Name>Subtraction</Name>
            <Unary>False</Unary>
            <PythonCall>np.subtract</PythonCall>
        </Test>
        <Test>
            <Name>Multiplication</Name>
            <Unary>False</Unary>
            <PythonCall>np.multiply</PythonCall>
        </Test>
        <Test>
            <Name>Division</Name>
            <Unary>False</Unary>
            <PythonCall>np.divide</PythonCall>
        </Test>
        <Test>
            <Name>Square</Name>
            <Unary>True</Unary>
            <PythonCall>np.square</PythonCall>
        </Test>
        <Test>
            <Name>SquareRoot</Name>
            <Unary>True</Unary>
            <PythonCall>np.sqrt</PythonCall>
        </Test>
        <Test>
            <Name>Power</Name>
            <Unary>False</Unary>
            <PythonCall>np.power</PythonCall>
        </Test>
        <Test>
            <Name>Exp</Name>
            <Unary>True</Unary>
            <PythonCall>np.exp</PythonCall>
        </Test>
        <Test>
            <Name>Exp2</Name>
            <Unary>True</Unary>
            <PythonCall>np.exp2</PythonCall>
        </Test>
        <Test>
            <Name>Exp10</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.power(10.0, _x)</PythonCall>
        </Test>
        <Test>
            <Name>Log</Name>
            <Unary>True</Unary>
            <PythonCall>np.log</PythonCall>
        </Test>
        <Test>
            <Name>Log2</Name>
            <Unary>True</Unary>
            <PythonCall>np.log2</PythonCall>
        </Test>
        <Test>
            <Name>Log10</Name>
            <Unary>True</Unary>
            <PythonCall>np.log10</PythonCall>
        </Test>
        <Test>
            <Name>Sin</Name>
            <Unary>True</Unary>
            <PythonCall>np.sin</PythonCall>
        </Test>
        <Test>
            <Name>Cos</Name>
            <Unary>True</Unary>
            <PythonCall>np.cos</PythonCall>
        </Test>
        <Test>
            <Name>Tan</Name>
            <Unary>True</Unary>
            <PythonCall>np.tan</PythonCall>
        </Test>
        <Test>
            <Name>ArcSin</Name>
            <Unary>True</Unary>
            <PythonCall>np.arcsin</PythonCall>
        </Test>
        <Test>
            <Name>ArcCos</Name>
            <Unary>True</Unary>
            <PythonCall>np.arccos</PythonCall>
        </Test>
        <Test>
            <Name>ArcTan</Name>
            <Unary>True</Unary>
            <PythonCall>np.arctan</PythonCall>
        </Test>
        <Test>
            <Name>Deg2Rad</Name>
            <Unary>True</Unary>
            <PythonCall>np.deg2rad</PythonCall>
        </Test>
        <Test>
            <Name>Rad2Deg</Name>
            <Unary>True</Unary>
            <PythonCall>np.rad2deg</PythonCall>
        </Test>
        <Test>
            <Name>Abs</Name>
            <Unary>True</Unary>
            <PythonCall>np.abs</PythonCall>
        </Test>
        <Test>
            <Name>Round</Name>
            <Unary>True</Unary>
            <PythonCall>np.round</PythonCall>
        </Test>
        <Test>
            <Name>Floor</Name>
            <Unary>True</Unary>
            <PythonCall>np.floor</PythonCall>
        </Test>
        <Test>
            <Name>Ceil</Name>
            <Unary>True</Unary>
            <PythonCall>np.ceil</PythonCall>
        </Test>
        <Test>
            <Name>Trunc</Name>
            <Unary>True</Unary>
            <PythonCall>np.trunc</PythonCall>
        </Test>
        <Test>
            <Name>Sign</Name>
            <Unary>True</Unary>
            <PythonCall>np.sign</PythonCall>
        </Test>
    </Arithmetic>
    <Logical>
        <Test>
            <Name>Less</Name>
            <Unary>False</Unary>
            <PythonCall>np.less</PythonCall>
        </Test>
        <Test>
            <Name>LessEqual</Name>
            <Unary>False</Unary>
            <PythonCall>np.less_equal</PythonCall>
        </Test>
        <Test>
            <Name>Greater</Name>
            <Unary>False</Unary>
            <PythonCall>np.greater</PythonCall>
        </Test>
        <Test>
            <Name>GreaterEqual</Name>
            <Unary>False</Unary>
            <PythonCall>np.greater_equal</PythonCall>
        </Test>
        <Test>
            <Name>Equal</Name>
            <Unary>False</Unary>
            <PythonCall>np.equal</PythonCall>
        </Test>
        <Test>
            <Name>NotEqual</Name>
            <Unary>False</Unary>
            <PythonCall>np.not_equal</PythonCall>
        </Test>
        <Test>
            <Name>LogicalOr</Name>
            <Unary>False</Unary>
            <PythonCall>np.logical_or</PythonCall>
        </Test>
        <Test>
            <Name>LogicalAnd</Name>
            <Unary>False</Unary>
            <PythonCall>np.logical_and</PythonCall>
        </Test>
        <Test>
            <Name>LogicalNot</Name>
            <Unary>True</Unary>
            <PythonCall>np.logical_not</PythonCall>
        </Test>
    </Logical>
    <Bitwise>
        <Test>
            <Name>BitwiseOr</Name>
            <Unary>False</Unary>
            <PythonCall>np.bitwise_or</PythonCall>
        </Test>
        <Test>
            <Name>BitwiseAnd</Name>
            <Unary>False</Unary>
            <PythonCall>np.bitwise_and</PythonCall>
        </Test>
        <Test>
            <Name>BitwiseXor</Name>
            <Unary>False</Unary>
            <PythonCall>np.bitwise_xor</PythonCall>
        </Test>
        <Test>
            <Name>BitwiseNot</Name>
            <Unary>True</Unary>
            <PythonCall>np.bitwise_not</PythonCall>
        </Test>
    </Bitwise>
    <LinearAlgebra>
        <Test>
            <Name>Dot</Name>
            <Unary>False</Unary>
            <PythonCall>np.dot</PythonCall>
        </Test>
        <Test>
            <Name>Transpose</Name>
            <Unary>True</Unary>
            <PythonCall>np.transpose</PythonCall>
        </Test>
        <Test>
            <Name>Inverse</Name>
            <Unary>True</Unary>
            <PythonCall>np.linalg.inv</PythonCall>
        </Test>
        <Test>
            <Name>PseudoInverse</Name>
            <Unary>True</Unary>
            <PythonCall>np.linalg.pinv</PythonCall>
        </Test>
        <Test>
            <Name>EigenValues</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.linalg.eig(_x)[0]</PythonCall>
        </Test>
        <Test>
            <Name>EigenVectors</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.linalg.eig(_x)[1]</PythonCall>
        </Test>
        <Test>
            <Name>Cholesky</Name>
            <Unary>True</Unary>
            <PythonCall>np.linalg.cholesky</PythonCall>
        </Test>
        <Test>
            <Name>SVD-U</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.linalg.svd(_x)[0]</PythonCall>
        </Test>
        <Test>
            <Name>SVD-Sigma</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.linalg.svd(_x)[1]</PythonCall>
        </Test>
        <Test>
            <Name>SVD-V</Name>
            <Unary>True</Unary>
            <PythonCall>lambda _x: np.linalg.svd(_x)[2]</PythonCall>
        </Test>
        <Test>
            <Name>Rank</Name>
            <Unary>True</Unary>
            <PythonCall>np.linalg.matrix_rank</PythonCall>
        </Test>
        <Test>
            <Name>Determinant</Name>
            <Unary>True</Unary>
            <PythonCall>np.linalg.det</PythonCall>
        </Test>
        <Test>
            <Name>Trace</Name>
            <Unary>True</Unary>
            <PythonCall>np.trace</PythonCall>
        </Test>
    </LinearAlgebra>
</MatUnitTests>